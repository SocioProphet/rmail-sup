In rough priority order...but please let me know if something you need
is missing.

= MUST FIX BEFORE RELEASE

- Update the README (status, versioning, etc.)

- Document "selling points"

  - Exception safety.
  - Parse transparency (crypto, etc.).

= EVENTUALLY

- Look at introducing a subclass of PushbackReader that provides #pos,
  so Normalizeeolreader doesn't need to.

- Look at getting rid of NormalizeEOLReader in favor of parsing \r\n
  directly.  This will make it easier to preserve message transparency
  100%.

- Look at having Header::Field objects use substrings for 100%
  transparency.

- What happens when parsing a message and you get two From_ lines?

- Revert name change back to RMail and RFilter modules.

= FIXME

- rakefile enforces NEWS update

- port rest of dist_config.rb to Rakefile

- get 'test' target working in the gem

- StreamHandler should get preamble_begin and preamble_end callbacks.
  Same for epilogue_begin, epilogue_end.

= STOLEN

- Header continuation issue:
  https://sourceforge.net/tracker/?func=detail&atid=105470&aid=504152&group_id=5470
- Subject: =?ISO-8859-1?Q?=24=A3_Kills_IRB?=

= Documentation

- Make it clear that all strings the library works with are the ASCII
  strings that are part of the RFC2822 message -- not strings in any
  other charset.

- Update Intro.txt, write MIME.txt and other Guides.

= Features

- RFC2231
  http://mail.python.org/pipermail/email-sig/2003-November/000032.html

- Handle charset issues in headers.

  - See MailParser and TMail for example API and implementation ideas.

- Smart handling of charset issues for text/ types.

  [Goal] allow setting the body part to a given piece of data, and
         RubyMail handles setting the appropriate MIME headers.  This
         requires the data to have a known charset.

  Maybe this plays into the encoding solution below.

- Base64 and quoted-printable encoding

  [Goal] allow setting the body part to a given piece of data, and
         RubyMail handles setting the appropriate MIME headers and
         possibly quoted-printable or base64 transcoding it if
         appropriate.

  This may be best done by introducing an RubyMail::TransferEncodedString
  class that knows whether it is transcoded as binary,
  quoted-printable, base64, etc.  You would set RubyMail::Message#body to
  a TransferEncodedString and RubyMail::Message would set the appropriate
  MIME headers.  If at serialization time the message body were set to
  a plain String, then RubyMail::Message would transcode it into base64.

- An RubyMail::Message#attach method that takes care of setting
  content-disposition, etc.

- Header folding in RubyMail::Header.

- A small wrapper around Net::SMTP#send_mail that takes care of:
  - parsing recipients out of the various message headers
  - deleting the Bcc: header
  - sending the message

- Provide a way to parse just the message headers, leaving the rest in
  the input stream (for use by RubyFilter).  This also implies a
  feature that parses a message body given a RubyMail::Header object and
  an input stream.  This should be easy -- read line by line until you
  get an empty line or EOF, then pass that off to parse_header as a
  string to be parsed.  Parsing the body can just use a
  PushbackReader.

- Handle different end of line terminators everywhere (for both
  parsing and generating).

- Provide some way when parsing a message to start spooling to disk
  for really large messages.  This would be easy to do depending on
  how message body transparency is implemented.

- MIME charset support in header fields and message bodies.  This
  requires m18n support in ruby, so it won't be coming soon.

- Maildir parsing.

- Simplify the Parser such that the class used to hold the parse
  result can be easily changed and so the memory used can be
  minimized.

  The idea is to support "bogofilter" style parsing where the data of
  the parse is immediately processed and thrown away but the structure
  and content of the parsed message is important.

  This may require extensions to header parsing, where things like the
  important MIME header fields can be parsed without creating a whole
  RubyMail::Header object.

= Minor Features

- Untainting of email addresses.  See Perl's CGI::Untaint::email.

- Parser for Received: headers.  See Perl's Mail::Field::Received.

= Documentation Tasks

- A "howto" like documentation.

  - How to write out a base64 encoded MIME part to a file.
  - How to parse a unix MBOX file.
  - MIME operations (see RFC2047)
    - Character sets in message bodies
    - Non-textual message bodies
    - Multi-part message bodies
    - Textual header information in character sets other than
      US-ASCII.

- Go through every class and make sure the methods are sorted in a
  sensible order so the RDoc output is nice.
